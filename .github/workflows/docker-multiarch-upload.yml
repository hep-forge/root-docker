name: Build Images

on:
  push:
    tags:
      - '*'

jobs:
  setup-matrix:
    name: setup
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Print GitHub Context as JSON
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Print Environment
        run: |
          env

      - name: Setup matrix combinations
        id: setup-matrix-combinations
        run: |

          generate_matrix() {
            local os_type=$1
            local arch=$2
            MATRIX_COMBINATIONS="$(bin/generate-matrix --arch $arch --$os_type ${GITHUB_REF#refs/tags/} | jq -c .)"
            echo "matrix-${os_type}-${arch}-combinations={\"include\":${MATRIX_COMBINATIONS}}" >> $GITHUB_OUTPUT
          }

          generate_matrix "linux" "amd64"
          generate_matrix "macos" "amd64"
          generate_matrix "windows" "amd64"
          
          generate_matrix "linux" "arm64"
          generate_matrix "macos" "arm64"
          cat $GITHUB_OUTPUT

    outputs:
      matrix-linux-amd64-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-linux-amd64-combinations }}
      matrix-macos-amd64-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-macos-amd64-combinations }}
      matrix-windows-amd64-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-windows-amd64-combinations }}

      matrix-linux-arm64-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-linux-arm64-combinations }}
      matrix-macos-arm64-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-macos-arm64-combinations }}

  build-linux-images:
    name: linux
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-linux-amd64-combinations) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      if: ${{ matrix.skip != true }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      if: ${{ matrix.skip != true }}
      with:
        buildx-version: latest

    - name: Log in to Docker
      uses: docker/login-action@v2
      if: ${{ matrix.skip != true }}
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build Docker Image
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && matrix.skip != true }}
      run: |

        DOCKERFILE_DIR="./recipe/${{ matrix.package.name }}/${{ matrix.package.version }}/${{ matrix.os.name }}/${{ matrix.os.version }}"
        cd $DOCKERFILE_DIR

        DOCKERFILE="Dockerfile.${{ matrix.platform.arch }}"
        if [ ! -f "$DOCKERFILE" ]; then
          DOCKERFILE="Dockerfile"
        fi

        docker buildx create --use
        docker buildx build --platform linux/${{ matrix.platform.arch || '' }} \
             --build-arg PACKAGE_NAME=${{ matrix.package.name || '' }} \
             --build-arg PACKAGE_VERSION="${{ matrix.package.version || '' }}" \
             --build-arg OS_NAME=${{ matrix.os.name || '' }} \
             --build-arg OS_VERSION=${{ matrix.os.version || '' }} \
             --build-arg PLATFORM_ARCH=${{ matrix.platform.arch || '' }} \
             -f $DOCKERFILE --push \
             -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-${{ matrix.platform.arch }}" .

  build-linux-arm-images:
    name: linux-arm
    needs: setup-matrix
    runs-on: ubuntu-24.04-arm
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-linux-arm64-combinations) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      if: ${{ matrix.skip != true }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      if: ${{ matrix.skip != true }}
      with:
        buildx-version: latest

    - name: Log in to Docker
      uses: docker/login-action@v2
      if: ${{ matrix.skip != true }}
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build Docker Image
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && matrix.skip != true }}
      run: |

        DOCKERFILE_DIR="./recipe/${{ matrix.package.name }}/${{ matrix.package.version }}/${{ matrix.os.name }}/${{ matrix.os.version }}"
        cd $DOCKERFILE_DIR

        DOCKERFILE="Dockerfile.${{ matrix.platform.arch }}"
        if [ ! -f "$DOCKERFILE" ]; then
          DOCKERFILE="Dockerfile"
        fi

        docker buildx create --use
        docker buildx build --platform linux/${{ matrix.platform.arch || '' }} \
             --build-arg PACKAGE_NAME=${{ matrix.package.name || '' }} \
             --build-arg PACKAGE_VERSION="${{ matrix.package.version || '' }}" \
             --build-arg OS_NAME=${{ matrix.os.name || '' }} \
             --build-arg OS_VERSION=${{ matrix.os.version || '' }} \
             --build-arg PLATFORM_ARCH=${{ matrix.platform.arch || '' }} \
             -f $DOCKERFILE --push \
             -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-${{ matrix.platform.arch }}" .

  build-linux-manifest:
    name: linux-manifest
    needs: [setup-matrix, build-linux-images, build-linux-arm-images]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-linux-amd64-combinations) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Log in to Docker
      if: ${{ matrix.skip != true }}
      uses: docker/login-action@v2
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Make Docker Manifest
      if: ${{ matrix.skip != true }}
      run: |

        docker buildx imagetools create \
            -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-amd64" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-arm64"

    - name: Get Latest GitHub Tag
      if: ${{ matrix.skip != true }}
      id: latest_tag
      run: |
        REPO="${{ github.repository }}"
        LATEST_TAG=$(curl -s "https://api.github.com/repos/$REPO/tags" | jq -r '.[].name' | sort -V | tail -n1)
        echo "Latest tag: $LATEST_TAG"
        echo "latest=$LATEST_TAG" >> $GITHUB_ENV

    - name: Determine Current Version
      if: ${{ matrix.skip != true }}
      id: current_tag
      run: |
        CURRENT_TAG="${{ github.ref_name }}"
        echo "Current tag: $CURRENT_TAG"
        echo "current=$CURRENT_TAG" >> $GITHUB_ENV

    - name: Check if Current Tag is Latest
      if: ${{ matrix.skip != true }}
      id: check_latest
      run: |
        if [ "$CURRENT_TAG" != "$LATEST_TAG" ]; then
          echo "This is not the latest version. Skipping manifest creation."
          exit 0
        fi
        echo "This is the latest version. Proceeding with manifest creation."

    - name: Make Docker Latest Manifest
      if: ${{ success() && matrix.skip != true }} # Only runs if the version is the latest
      run: |

        docker buildx imagetools create \
            -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:latest-${{ matrix.os.name }}${{ matrix.os.version }}" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-amd64" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-arm64"




  
  build-macos-images:
    name: macos
    needs: setup-matrix
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-macos-arm64-combinations) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      if: ${{ matrix.skip != true }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      if: ${{ matrix.skip != true }}
      with:
        buildx-version: latest

    - name: Log in to Docker
      uses: docker/login-action@v2
      if: ${{ matrix.skip != true }}
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build Docker Image
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && matrix.skip != true }}
      run: |

        DOCKERFILE_DIR="./recipe/${{ matrix.package.name }}/${{ matrix.package.version }}/${{ matrix.os.name }}/${{ matrix.os.version }}"
        cd $DOCKERFILE_DIR

        DOCKERFILE="Dockerfile.${{ matrix.platform.arch }}"
        if [ ! -f "$DOCKERFILE" ]; then
          DOCKERFILE="Dockerfile"
        fi

        docker buildx create --use
        docker buildx build --platform macos/${{ matrix.platform.arch || '' }} \
             --build-arg PACKAGE_NAME=${{ matrix.package.name || '' }} \
             --build-arg PACKAGE_VERSION=${{ matrix.package.version || '' }} \
             --build-arg OS_NAME=${{ matrix.os.name || '' }} \
             --build-arg OS_VERSION=${{ matrix.os.version || '' }} \
             --build-arg PLATFORM_ARCH=${{ matrix.platform.arch || '' }} \
             -f $DOCKERFILE --push \
             -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-${{ matrix.plaform.arch }}" .

  build-macos-intel-images:
    name: macos-intel
    needs: setup-matrix
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-macos-amd64-combinations) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      if: ${{ matrix.skip != true }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      if: ${{ matrix.skip != true }}
      with:
        buildx-version: latest

    - name: Log in to Docker
      uses: docker/login-action@v2
      if: ${{ matrix.skip != true }}
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build Docker Image
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && matrix.skip != true }}
      run: |

        DOCKERFILE_DIR="./recipe/${{ matrix.package.name }}/${{ matrix.package.version }}/${{ matrix.os.name }}/${{ matrix.os.version }}"
        cd $DOCKERFILE_DIR

        DOCKERFILE="Dockerfile.${{ matrix.platform.arch }}"
        if [ ! -f "$DOCKERFILE" ]; then
          DOCKERFILE="Dockerfile"
        fi

        docker buildx create --use
        docker buildx build --platform macos/${{ matrix.platform.arch || '' }} \
             --build-arg PACKAGE_NAME=${{ matrix.package.name || '' }} \
             --build-arg PACKAGE_VERSION=${{ matrix.package.version || '' }} \
             --build-arg OS_NAME=${{ matrix.os.name || '' }} \
             --build-arg OS_VERSION=${{ matrix.os.version || '' }} \
             --build-arg PLATFORM_ARCH=${{ matrix.platform.arch || '' }} \
             -f $DOCKERFILE --push \
             -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-${{ matrix.platform.arch }}" .


  build-macos-manifest:
    name: macos-manifest
    needs: [setup-matrix, build-macos-images,  build-macos-intel-images]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-macos-amd64-combinations) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      if: ${{ matrix.skip != true }}

    - name: Log in to Docker
      uses: docker/login-action@v2
      if: ${{ matrix.skip != true }}
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Make Docker Manifest
      if: ${{ matrix.skip != true }}
      run: |

        docker buildx imagetools create \
            -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-amd64" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-arm64"

    - name: Get Latest GitHub Tag
      if: ${{ matrix.skip != true }}
      id: latest_tag
      run: |
        REPO="${{ github.repository }}"
        LATEST_TAG=$(curl -s "https://api.github.com/repos/$REPO/tags" | jq -r '.[].name' | sort -V | tail -n1)
        echo "Latest tag: $LATEST_TAG"
        echo "latest=$LATEST_TAG" >> $GITHUB_ENV

    - name: Determine Current Version
      if: ${{ matrix.skip != true }}
      id: current_tag
      run: |
        CURRENT_TAG="${{ github.ref_name }}"
        echo "Current tag: $CURRENT_TAG"
        echo "current=$CURRENT_TAG" >> $GITHUB_ENV

    - name: Check if Current Tag is Latest
      if: ${{ matrix.skip != true }}
      id: check_latest
      run: |
        if [ "$CURRENT_TAG" != "$LATEST_TAG" ]; then
          echo "This is not the latest version. Skipping manifest creation."
          exit 0
        fi
        echo "This is the latest version. Proceeding with manifest creation."

    - name: Make Docker Latest Manifest
      if: ${{ success() && matrix.skip != true }}  # Only runs if the version is the latest
      run: |

        docker buildx imagetools create \
            -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:latest-${{ matrix.os.name }}${{ matrix.os.version }}" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-amd64" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-arm64"



  
  build-windows-images:
    name: windows
    needs: setup-matrix
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-windows-amd64-combinations) }}
      
    steps:
    - name: Checkout Repository
      if: ${{ matrix.skip != true }}
      uses: actions/checkout@v3

    - name: Set up Docker
      if: ${{ matrix.skip != true }}
      uses: docker/setup-buildx-action@v2
      with:
        buildx-version: latest

    - name: Log in to Docker
      if: ${{ matrix.skip != true }}
      uses: docker/login-action@v2
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build Docker Image
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && matrix.skip != true }}
      run: |

        DOCKERFILE_DIR="./recipe/${{ matrix.package.name }}/${{ matrix.package.version }}/${{ matrix.os.name }}/${{ matrix.os.version }}"
        cd $DOCKERFILE_DIR

        DOCKERFILE="Dockerfile.${{ matrix.platform.arch }}"
        if [ ! -f "$DOCKERFILE" ]; then
          DOCKERFILE="Dockerfile"
        fi

        docker buildx create --use
        docker buildx build --platform windows/${{ matrix.platform.arch || '' }} \
             --build-arg PACKAGE_NAME=${{ matrix.package.name || '' }} \
             --build-arg PACKAGE_VERSION=${{ matrix.package.version || '' }} \
             --build-arg OS_NAME=${{ matrix.os.name || '' }} \
             --build-arg OS_VERSION=${{ matrix.os.version || '' }} \
             --build-arg PLATFORM_ARCH=${{ matrix.platform.arch || '' }} \
             -f $DOCKERFILE --push \
             -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-${{ matrix.platform.arch }}" .


  build-windows-manifest:
    name: windows-manifest
    needs: [setup-matrix, build-windows-images]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-windows-amd64-combinations) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      if: ${{ matrix.skip != true }}

    - name: Log in to Docker
      uses: docker/login-action@v2
      if: ${{ matrix.skip != true }}
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Make Docker Manifest
      if: ${{ matrix.skip != true }}
      run: |

        docker buildx imagetools create \
            -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-amd64" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-arm64"

    - name: Get Latest GitHub Tag
      if: ${{ matrix.skip != true }}
      id: latest_tag
      run: |
        REPO="${{ github.repository }}"
        LATEST_TAG=$(curl -s "https://api.github.com/repos/$REPO/tags" | jq -r '.[].name' | sort -V | tail -n1)
        echo "Latest tag: $LATEST_TAG"
        echo "latest=$LATEST_TAG" >> $GITHUB_ENV

    - name: Determine Current Version
      if: ${{ matrix.skip != true }}
      id: current_tag
      run: |
        CURRENT_TAG="${{ github.ref_name }}"
        echo "Current tag: $CURRENT_TAG"
        echo "current=$CURRENT_TAG" >> $GITHUB_ENV

    - name: Check if Current Tag is Latest
      if: ${{ matrix.skip != true }}
      id: check_latest
      run: |
        if [ "$CURRENT_TAG" != "$LATEST_TAG" ]; then
          echo "This is not the latest version. Skipping manifest creation."
          exit 0
        fi
        echo "This is the latest version. Proceeding with manifest creation."

    - name: Make Docker Latest Manifest
      if: ${{ success() && matrix.skip != true }}  # Only runs if the version is the latest
      run: |

        docker buildx imagetools create \
            -t "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:latest-${{ matrix.os.name }}${{ matrix.os.version }}" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-amd64" \
               "${{ vars.DOCKER_USERNAME }}/${{ matrix.package.name }}:${{ matrix.package.version }}-${{ matrix.os.name }}${{ matrix.os.version }}-arm64"

